@page "/"
@using WebApp.Shared.Components
@using WebApp.Models
@using System
@using System.IO

<MudContainer Class="mt-6">
    <MudGrid>
        <MudItem xs="12">
            <MudGrid>
                @for (int i = 0; i < papers; i++)
                {
                    int localindex = i;
                    bool disabled = !IconExists(localindex + 1);
                    string cardClass = disabled ? "hazard-background" : "";
                    <MudItem xs="@breaks[localindex]">
                        <MudCard Class="@cardClass">
                            <MudCardContent>
                                <DragDropZone Color = "@colors[localindex]" Index = "@(localindex + 1)" Disabled="@disabled"></DragDropZone>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>
@inject IJSRuntime jsRuntime

@code {

    bool IconExists(int index)
    {
        try
        {
            string currentDir = Directory.GetCurrentDirectory();
            string icoDefPath = Path.Combine(currentDir + $"\\wwwroot\\icons\\def\\{index}.ico");
            string icoEmptyPath = Path.Combine(currentDir + $"\\wwwroot\\icons\\empty\\{index}.ico");

            bool data = File.Exists(icoDefPath) && File.Exists(icoEmptyPath);
            jsRuntime.InvokeAsync<string>("console.log", data);
            return data;
        }
        catch
        {
            return false;
        }
    }

    int papers = 16;

    int Papers
    {
        get => papers;
        set => UpdatePapers(value);
    }

    string[] colors = FolderColors.GetAllColors().ToArray();
    int[] breaks = new int[16] { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if (i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index, int changeamount)
    {
        List<int> newbreaks = breaks.ToList();

        newbreaks[index] = newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }

}